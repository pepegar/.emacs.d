* Emacs configuration

This is my emacs configuration, this time in Org mode.  The previous
working version of it was [[https://github.com/pepegar/emacs.d/tree/d6c5ef558fc4a28f7b107a4edb5c1383886a23d6][this commit]].

The idea behind using org mode for this is that I can get rid of all
these cheatsheets I've flying around my system (and also physical
desk) and have both the emacs-lisp code, the notes, and the
cheatsheets all here.


** Initial configuration
*** Some personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Pepe Garc√≠a"
      user-mail-address "jl.garhdez@gmail.com")
#+END_SRC

*** load ~/.emacs.d/lisp

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC

*** Help emacs find my executables

#+BEGIN_SRC emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin")))
(setq exec-path (append exec-path '("/Users/pepe/.local/bin")))
#+END_SRC

*** plumbing

    To tell emacs that all saves should go to the ~/.backups~ folder.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.backups")))
#+END_SRC
*** ~use-package~

   I manage all the packages for my emacs configuration through the
   fantastic [[https://github.com/jwiegley/use-package][use-package]]. Here's how to get it:

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(require 'bind-key)
#+END_SRC

*** Appearance

    Select the font size, family...

#+BEGIN_SRC emacs-lisp
(set-face-attribute
 'default nil :family "Operator Mono"
 :height 170)

(use-package all-the-icons
  :ensure t)

(use-package all-the-icons-dired
  :ensure t
  :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

*** maintaining selected theme between sessions

    I think I got all this from @anler, but am not sure :)

#+BEGIN_SRC emacs-lisp
(defun my-load-saved-theme ()
  (interactive)
  (when (file-exists-p my-saved-theme-filename)
    (let ((theme (intern (with-temp-buffer
                           (insert-file-contents my-saved-theme-filename)
                           (buffer-string)))))
      (unless (eq theme 'default)
        (load-theme theme :no-confirm)))))

(add-hook 'after-init-hook #'my-load-saved-theme)

(defvar my-load-theme-hook
  nil
  "Hooks to run after loading a theme.")

(defvar my-saved-theme-filename "~/.emacs.d/.emacs-theme")

(advice-add 'load-theme :after #'my-save-theme)
(advice-add 'disable-theme :after #'my-save-default-theme)
(advice-add 'load-theme :after #'my-run-theme-hooks)

(defun my-run-theme-hooks (theme &optional no-confirm no-enable)
  (run-hooks 'my-load-theme-hook))

(defun my-save-default-theme (disabled-theme)
  (my-save-theme 'default))

(defun my-save-theme (theme &optional no-confirm no-enable)
  (with-temp-buffer
    (insert (symbol-name theme))
    (when (file-writable-p my-saved-theme-filename)
      (write-region (point-min)
                    (point-max)
                    my-saved-theme-filename))))
#+END_SRC

** Tools

*** Gnus

    Gnus is for email within emacs.  Its configuration is in ~\~/.gnus~

#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Erc

    Erc is an IRC client for emacs.

#+BEGIN_SRC emacs-lisp
(use-package erc
  :ensure t
  :config
    (setq erc-modules '(autojoin notifications)))
#+END_SRC

*** Magit

    Magit is a better way to use git, from within emacs, of course.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config

  (use-package magit-gh-pulls
    :ensure t
    :init
    (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls)))
#+END_SRC

    There are several tricks I like to do with Magit.

**** commit & spinoff branch

     Normally, when I work on a small patch for a project I don't
     directly start creating the feature branch, but first create the
     commit/commits that solve the issue and then create the branch &
     pull request.

     I do this by fixing and creating the commits normally (on top of
     ~master~), and then within the magit screen, I just hit ~b s~,
     making a spinoff of master, with the last commits.  This is so
     convenient :)

**** managing/creating pull requests

     For creating pull requests, I use the ~magit-gh-pulls~ package,
     that connects to the github API via HTTP and allows me to create,
     list, and see the Pull Requests for the repo.

     Normally I need to edit the ~.git/config~ file and add the remote
     github repo:

#+BEGIN_SRC
[magit]
        gh-pulls-repo = pepegar/$repo
#+END_SRC

     After that's set, I can just ~# g~ to refresh the latest pull
     requests, ~# o~ on a pr of the list to open in firefox, or ~# c~
     to create a new PR from the existing changes.

*** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-mode-line
        '(:eval (format " [%s]" (projectile-project-name))))
  (setq projectile-remember-window-configs t)
  (setq projectile-completion-system 'ivy))
#+END_SRC
*** Diminish

    You don't always want the minor modes you're using to appear on
    the modeline, that's what ~diminish~ is for.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :pin melpa-stable)
#+END_SRC

*** Etags

    Etags is for browsing the code using ctags TAGS files.

#+BEGIN_SRC emacs-lisp
(use-package etags
  :ensure t
  :config
  (use-package etags-select :ensure t)
  (use-package etags-table :ensure t))
#+END_SRC

*** Flycheck

    Flycheck is a spellchecker.  Truth be told, I don't use it very
    much... but yeah, here it is!

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :pin melpa-stable)
#+END_SRC

*** Ivy, counsel, swiper

    I'm mostly a helm user, but want to give ivy a try now.  Ivy comes
    out of the box with ~counsel~ and ~swiper~.

**** Search the word under the cursor

     Open swiper-isearch with ~C-s~, and then put copy the word under
     the cursor to the minibuffer with ~M-n~.

     For extending the search to the next word, use ~M-j~.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :bind (("C-x C-b" . ivy-switch-buffer))
  :config
      (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d "
            ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                    (t      . ivy--regex-fuzzy)))

  (use-package flx
    :ensure t)

  (use-package counsel
    :ensure t
    :bind (("C-c a g" . counsel-projectile-ag)
           ("M-x"     . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-c p h" . counsel-projectile)
           ([f9]      . counsel-load-theme)))

  (use-package counsel-projectile
    :ensure t)

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ("C-;" . swiper-avy))))
#+END_SRC

*** ace-window

    ace-window is a better ~other-window~.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind (("M-o" . ace-window)))
#+END_SRC

*** Hydra

    Hydra allows me to create menus of keybindings.  I have several
    ones, for accessing my dotfiles, spelllchecking, going to my org
    files...

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :bind (("C-x t" . toggle/body)
	 ("C-x j" . gotoline/body)
	 ("C-x c" . orghydra/body)
	 ("C-x p" . dotfiles/body))
  :config

  (defhydra toggle (:color blue)
    "toggle"
    ("a" abbrev-mode "abbrev")
    ("s" flyspell-mode "flyspell")
    ("f" flycheck-mode "flycheck")
    ("d" toggle-debug-on-error "debug")
    ("c" fci-mode "fCi")
    ("t" toggle-truncate-lines "truncate")
    ("w" whitespace-mode "whitespace")
    ("q" nil "cancel"))

  (defhydra orghydra (:color blue)
    "org"
    ("i" org-clock-in "clock in")
    ("o" org-clock-out "clock out")
    ("n" (find-file "~/org/notes.org") "notes.org")
    ("I" (find-file "~/org/i.org") "i.org")
    ("q" nil "cancel"))

  (defhydra dotfiles (:color black)
    "dotfiles"
    ("c" (find-file "~/.emacs.d/config.org") "config.org")
    ("z" (find-file "~/.zshrc") "zshrc")
    ("g" (find-file "~/.gnus") "gnus")
    ("q" nil "cancel"))

  (defhydra gotoline
    ( :pre (linum-mode 1)
	   :post (linum-mode -1))
    "goto"
    ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
    ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
    ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
    ("e" (lambda () (interactive)(end-of-buffer)) "end")
    ("c" recenter-top-bottom "recenter")
    ("n" next-line "down")
    ("p" (lambda () (interactive) (forward-line -1))  "up")
    ("g" goto-line "goto-line")))
#+END_SRC

*** Restclient

    Restclient is an awesome tool that allows you to describe HTTP
    request in plain text and execute them.  From [fn:1]their readme:

    | keybinding | action                                                                                         |
    |------------+------------------------------------------------------------------------------------------------|
    | ~C-c C-c~  | runs the query under the cursor, tries to pretty-print the response (if possible)              |
    | ~C-c C-r~  | same, but doesn't do anything with the response, just shows the buffer                         |
    | ~C-c C-v~  | same as C-c C-c, but doesn't switch focus to other window                                      |
    | ~C-c C-p~  | jump to the previous query                                                                     |
    | ~C-c C-n~  | jump to the next query                                                                         |
    | ~C-c C-.~  | mark the query under the cursor                                                                |
    | ~C-c C-u~  | copy query under the cursor as a curl command                                                  |
    | ~C-c C-g~  | start a helm session with sources for variables and requests (if helm is available, of course) |
    | ~C-c n n~  | narrow to regi                                                                                 |

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t
  :mode (("\\.http\\'" . restclient-mode)))
#+END_SRC

*** Org mode

    I try to write down everything in org mode, and to keep it
    updated.  This is my current configuration.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :bind (("C-c a a" . org-agenda)
	 ("C-c c" . counsel-org-capture))
  :config

  (use-package org-bullets
    :ensure t
    :commands (org-bullets-mode)
    :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (mscgen . t)
     (python . t)))
  (setq org-agenda-files '("~/org/")
	org-default-notes-file (concat org-directory "/notes.org")
	org-capture-templates '(("a" "Appointment" entry (file  "~/org/appointments.org" "Appointments") "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n\n")
				("n" "Note" entry (file+headline "~/org/notes.org" "Notes") "* Note %?\n%T")
				("l" "Link" entry (file+headline "~/org/links.org" "Links") "* %? %^L %^g \n%T" :prepend t)
				("P" "Paper" entry (file+headline "~/org/papers.org" "Papers") "* %? %^L %^g \n%T" :prepend t)
				("t" "To Do Item" entry (file+headline "~/org/i.org" "Work") "* TODO %?\n%T" :prepend t)
				("p" "Personal To Do Item" entry (file+headline "~/org/i.org" "Personal") "* TODO %?\n%T" :prepend t))
	org-src-fontify-natively t))
#+END_SRC

*** Multiple cursors

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-* l" . mc/edit-lines)
	 ("C->" . mc/mark-next-like-this)
	 ("C-<" . mc/mark-previous-like-this)
         ("C-* C-*" . mc/mark-all-like-this)
         ("C-c C-* C-*" . mc/mark-more-like-this)
         ("C-* i" . mc/insert-numbers)
         ("C-* s" . mc/sort-regions)
         ("C-* r" . mc/reverse-regions)
         ("M-<mouse-1>" . mc/add-cursor-on-click))
  :init
  (global-unset-key (kbd "M-<down-mouse-1>"))
  :config
  (require 'mc-extras))

(use-package mc-extras
  :ensure t
  :commands (mc/compare-chars mc/compare-chars-backward mc/compare-chars-forward
            mc/cua-rectangle-to-multiple-cursors
            mc/remove-current-cursor mc/remove-duplicated-cursors)
  :config
  (progn
    (bind-keys :map mc/keymap
         ("C-. C-d" . mc/remove-current-cursor)
         ("C-. d" . mc/remove-duplicated-cursors)
         ("C-. =" . mc/compare-chars))
    (eval-after-load 'cua-base
'(bind-key "C-. C-," 'mc/cua-rectangle-to-multiple-cursors cua--rectangle-keymap))))
#+END_SRC

*** Expand region

    Expand region is an useful little tool.  With it I can select a
    higher region each time I hit ~C-@~.  For example, imagine we have
    the following function call in lisp (and that the caret is in the
    ~^~ position):

#+BEGIN_SRC
(hello (dolly))
         ^
#+END_SRC

    If I hit ~C-@~ once, I'll get this selected:

#+BEGIN_SRC
(hello (dolly))
        ^---^
#+END_SRC

    If I hit it once again, I'll get:

#+BEGIN_SRC
(hello (dolly))
       ^-----^
#+END_SRC

    And if I hit it again, I'll get:

#+BEGIN_SRC
(hello (dolly))
 ^-----------^
#+END_SRC

    Finally, if I hit it 4 times, the whole sexp will be selected:

#+BEGIN_SRC
(hello (dolly))
^-------------^
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region))
#+END_SRC

*** Avy

    Avy allows me to jump to different parts of the current buffer.
    There are some useful pictures of how it works in [[https://github.com/abo-abo/avy][the repo]].

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t)
#+END_SRC

*** Golden ratio

    Golden ratio makes splits looks better :)

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :diminish golden-ratio-mode
  :config (golden-ratio-mode))
#+END_SRC
** Themes

   I switch between a big number of themes, sometimes several times a
   day, depending on my mood.  The ones I stick with as of now, are
   the following:

#+BEGIN_SRC emacs-lisp
(use-package doom-themes :pin melpa-stable :ensure t :defer t)
(use-package idea-darkula-theme :ensure t :defer t)
(use-package punpun-theme :ensure t :defer t)
(use-package white-theme :ensure t :defer t)
(use-package arjen-grey-theme :ensure t :defer t)
(use-package atom-one-dark-theme :ensure t :defer t)
(use-package birds-of-paradise-plus-theme :ensure t :defer t)
(use-package bliss-theme :ensure t :defer t)
(use-package cyberpunk-theme :ensure t :defer t)
(use-package espresso-theme :ensure t :defer t)
(use-package github-theme :ensure t :defer t)
(use-package heroku-theme :ensure t :defer t)
(use-package idea-darkula-theme :ensure t :defer t)
(use-package plan9-theme :ensure t :defer t)
(use-package soothe-theme :ensure t :defer t)
(use-package subatomic-theme :ensure t :defer t)
(use-package sublime-themes :ensure t :defer t)
(use-package white-theme :ensure t :defer t)
(use-package madhat2r-theme :ensure t :defer t)
(use-package kosmos-theme :ensure t :defer t)
(use-package nord-theme :ensure t :defer t)
#+END_SRC

** Programming languages

   At the time of writing this, I mostly write scala, but I've used a
   number of languages previously:

#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :ensure t
  :interpreter ("scala" . scala-mode)
  :config
  (use-package sbt-mode :ensure t))

(use-package idris-mode :ensure t)
(use-package nix-mode :ensure t)
(use-package groovy-mode :ensure t)
(use-package yaml-mode :ensure t)
(use-package json-mode :ensure t)
(use-package haskell-mode
  :ensure t
  :mode "\\.hs\\'"
  :bind (("C-c C-s" . fix-imports)
	 ("C-c C-c" . haskell-compile)
	 ("C-,"     . haskell-move-nested-left)
	 ("C-."     . haskell-move-nested-right)
	 ("C-c C-." . haskell-mode-format-imports)
	 ("s-i"     . haskell-navigate-imports)
	 ("C-c C-l" . haskell-process-load-or-reload)
	 ("C-`"     . haskell-interactive-bring)
	 ("C-c C-t" . haskell-process-do-type)
	 ("C-c C-i" . haskell-process-do-info)
	 ("C-c C-c" . haskell-process-cabal-build)
	 ("C-c C-k" . haskell-interactive-mode-clear))
  :config
  (custom-set-variables
   '(haskell-ask-also-kill-buffers nil)
   '(haskell-interactive-popup-errors nil)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-process-log t)
   '(haskell-process-suggest-remove-import-lines  t)
   '(haskell-process-type (quote stack-ghci))
   '(haskell-stylish-on-save t))


  (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (add-hook 'haskell-mode-hook 'flycheck-mode)
  (add-hook 'haskell-mode-hook 'hindent-mode)
  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)
  (add-hook 'haskell-mode-hook (lambda ()
  (add-hook 'before-save-hook 'haskell-mode-format-imports nil 'local))))

(use-package markdown-mode
  :ensure t
  :mode "\\.md\\'"
  :config

  (use-package markdown-toc
    :ensure t))
#+END_SRC

** Some more configuration for when all packages has been loaded

#+BEGIN_SRC emacs-lisp
(require 'diminish)
(require 'bind-key)

(electric-pair-mode 1)
#+END_SRC

** Weird characters I write

   In a day to day basis, I only use the ~Œª~ there, but who knows? Now
   I can write most of those letters :)

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-g a") "Œ±") ; alpha
(global-set-key (kbd "M-g b") "Œ≤") ; beta
(global-set-key (kbd "M-g g") "Œ≥") ; gamma
(global-set-key (kbd "M-g d") "Œ¥") ; delta
(global-set-key (kbd "M-g e") "Œµ") ; epsilon
(global-set-key (kbd "M-g z") "Œ∂") ; zeta
(global-set-key (kbd "M-g h") "Œ∑") ; eta
(global-set-key (kbd "M-g q") "Œ∏") ; theta
(global-set-key (kbd "M-g i") "Œπ") ; iota
(global-set-key (kbd "M-g k") "Œ∫") ; kappa
(global-set-key (kbd "M-g l") "Œª") ; lambda
(global-set-key (kbd "M-g m") "Œº") ; mu
(global-set-key (kbd "M-g n") "ŒΩ") ; nu
(global-set-key (kbd "M-g x") "Œæ") ; xi
(global-set-key (kbd "M-g o") "Œø") ; omicron
(global-set-key (kbd "M-g p") "œÄ") ; pi
(global-set-key (kbd "M-g r") "œÅ") ; rho
(global-set-key (kbd "M-g s") "œÉ") ; psi
(global-set-key (kbd "M-g t") "œÑ") ; tau
(global-set-key (kbd "M-g u") "œÖ") ; upsilon
(global-set-key (kbd "M-g f") "œï") ; phi
(global-set-key (kbd "M-g j") "œÜ") ; phi
(global-set-key (kbd "M-g c") "œá") ; xi
(global-set-key (kbd "M-g y") "œà") ; psi
(global-set-key (kbd "M-g w") "œâ") ; omega
(global-set-key (kbd "M-g A") "Œë") ; ALPHA
(global-set-key (kbd "M-g B") "Œí") ; BETA
(global-set-key (kbd "M-g G") "Œì") ; GAMMA
(global-set-key (kbd "M-g D") "Œî") ; DELTA
(global-set-key (kbd "M-g E") "Œï") ; EPSILON
(global-set-key (kbd "M-g Z") "Œñ") ; ZETA
(global-set-key (kbd "M-g H") "Œó") ; ETA
(global-set-key (kbd "M-g Q") "Œò") ; THETA
(global-set-key (kbd "M-g I") "Œô") ; IOTA
(global-set-key (kbd "M-g K") "Œö") ; KAPPA
(global-set-key (kbd "M-g L") "Œõ") ; LAMBDA
(global-set-key (kbd "M-g M") "Œú") ; MU
(global-set-key (kbd "M-g N") "Œù") ; NU
(global-set-key (kbd "M-g X") "Œû") ; XI
(global-set-key (kbd "M-g O") "Œü") ; OMICRON
(global-set-key (kbd "M-g P") "Œ†") ; PI
(global-set-key (kbd "M-g R") "Œ°") ; RHO
(global-set-key (kbd "M-g S") "Œ£") ; PSI
(global-set-key (kbd "M-g T") "Œ§") ; TAU
(global-set-key (kbd "M-g U") "Œ•") ; UPSILON
(global-set-key (kbd "M-g F") "Œ¶") ; PHI
(global-set-key (kbd "M-g J") "Œ¶") ; PHI
(global-set-key (kbd "M-g C") "Œß") ; XI
(global-set-key (kbd "M-g Y") "Œ®") ; PSI
(global-set-key (kbd "M-g W") "Œ©") ; OMEGA
(global-set-key (kbd "M-g .") "‚àò")
(global-set-key (kbd "M-g *") "‚äõ")

#+END_SRC

** Thanks

For this configuration I've been inspired by:

- [fn:2]anler
- [fn:3]danielmai
- [fn:4]jwiegley
- [fn:5]abo-abo


* Footnotes

[fn:1] https://github.com/pashky/restclient.el
[fn:2] https://github.com/anler/.emacs.d
[fn:3] https://github.com/danielmai
[fn:4] https://github.com/jwiegley
[fn:5] https://github.com/abo-abo
